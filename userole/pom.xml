<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>club.musician</groupId>
  <artifactId>userole</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <!-- 文件拷贝时的编码 -->
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!-- 编译时的编码 -->
    <maven.compiler.encoding>UTF-8</maven.compiler.encoding>

  </properties>


  <!--
    1.添加依赖
      spring-boot
      spring-security
      spring-web
      spring和mybatis相关依赖
      mysql-java-connector

    2.编写application.properties
      连接数据库，创建连接池

    3.创建自己的User类，代替UserDetails

    4.创建自定义的UserDetailsService实现类
      在重写方法中，查询数据库获取用户信息，获取角色数据
      构建UserDetails实现类对象

    5.创建类继承这个WebSecurityConfigurerAdapter
      来自定一些安全配置

    6.自定义登录、登出页面界面
      1）传统的form登录
      2）Ajax登录

    7.创建一些测试的controller

    8.默认的登录界面
      访问地址：/login
      请求方式：post
      请求参数:username,password
      spring security其实是使用过滤器进行处理的UsernamePasswordAuthenticationFilter进行处理的
      如果验证通过会给你一个UsernamePasswordAuthenticationToken

      如何自定义登录界面
        1.在static文件夹下创建一个mylogin.html
        2.然后你得让spring security知道的你的登录界面,在MysecurityConfig中进行配置我们自定义的登录界面
            http.httpBasic().and()
                //指定不需要授权就可以访问的地址
                .authorizeRequests().antMatchers("/index", "/mylogin.html","/login","/error.html").permitAll()
                .antMatchers("/access/user/**").hasRole("USER")
                .antMatchers("/access/read/**").hasRole("READ")
                .antMatchers("/access/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated().and()
//                .formLogin().permitAll();
                //指定咱们自定义的登录界面
                .formLogin().loginPage("/mylogin.html")
                //指定成form表单中action中的那个值，原本的spring security的登录地址
                .loginProcessingUrl("/login")
                .failureUrl("/error.html")  //处理登录错误的页面
                //跨域关闭，为了咱们自定义的登录、报错页面管用
                .and().csrf().disable();
      9.完善默认登录界面
        1）自定义登录界面的验证码的使用
          1.创建页面，登录界面/resources/static/mylogin.html
          2.action：/login 可以自定义
          3.method:post
          4.参数:username,password，自定义参数
              http.httpBasic().and()
                .authorizeRequests().antMatchers("/index", "/mylogin.html","/login","/error.html").permitAll()
                .antMatchers("/access/user/**").hasRole("USER")
                .antMatchers("/access/read/**").hasRole("READ")
                .antMatchers("/access/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated().and()
//                .formLogin().permitAll();
                .formLogin()
                //自定义自己的用户名密码参数
//                .usernameParameter("myname")
//                .passwordParameter("mypassword")
                .loginPage("/mylogin.html")
                .loginProcessingUrl("/login")
                .failureUrl("/error.html")  //处理登录错误的页面
                .and().csrf().disable();
           5.错误提示界面，error.html文件中
              1.设置访问的白名单 - 无需登录就能访问的地址
              2.指定登录的界面，登录的uri地址
           6.关闭跨域访问的安全设置

        2）上面这种的登录方式是基于表单的，而对于现在的前后端分离的方式不太适合，一般是使用json作为数据的交换格式，那么我就就要使用另外一种方式了




   -->


  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.4.5</version>
  </parent>


  <dependencies>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
    </dependency>

    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
      <version>2.1.4</version>
    </dependency>

    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>druid-spring-boot-starter</artifactId>
      <version>1.1.21</version>
    </dependency>


    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <!--                <executions>-->
        <!--                    <execution>-->
        <!--                        <goals>-->
        <!--                            <goal>java</goal>-->
        <!--                        </goals>-->
        <!--                    </execution>-->
        <!--                </executions>-->
        <configuration>
          <classpathScope>test</classpathScope>
          <!--                    <mainClass>com.itheima.test.MybatisTest</mainClass>-->
        </configuration>
      </plugin>

    </plugins>
  </build>
</project>
